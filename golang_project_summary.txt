===== FILE: ./migrations/000003_create_transactions_table.up.sql =====
CREATE TABLE transactions
(
    id               SERIAL PRIMARY KEY,
    user_id          INT REFERENCES users (id) ON DELETE CASCADE,
    amount           DECIMAL(10, 2) NOT NULL,
    transaction_type VARCHAR(10) CHECK (transaction_type IN ('credit', 'debit')),
    category_id      INT            REFERENCES categories (id) ON DELETE SET NULL,
    timestamp        TIMESTAMP DEFAULT NOW()
);

CREATE INDEX idx_transactions_user_id ON transactions (user_id);
CREATE INDEX idx_transactions_timestamp ON transactions (timestamp);
===== FILE: ./migrations/000006_seed_test_data.down.sql =====
-- Rollback for seed data
-- Just remove any rows we inserted for the "test" user and associated records

DELETE FROM ai_predictions
WHERE user_id = 1;

DELETE FROM transactions
WHERE user_id = 1;

DELETE FROM budgets
WHERE user_id = 1;

DELETE FROM users
WHERE id = 1;
===== FILE: ./migrations/000002_create_categories_table.down.sql =====
-- Rollback for Categories Table
DROP TABLE IF EXISTS categories;===== FILE: ./migrations/000006_seed_test_data.up.sql =====
-- Seed data for initial testing

-- 1) Test user
--    Using a bcrypt-hash for "test.password" below.
--    Hash generated by e.g. bcrypt cost=10.
--    (Of course, in a real environment you'd want to manage secrets more carefully!)
INSERT INTO users (id, username, email, password_hash)
VALUES
    (1, 'test.user', 'test.user@example.com', '$2a$10$U9TcJgB4JZrEE61hh4E2dOIQhrkZpZ73vaT/6Gth2zSa0jk2bWCS.');

-- 2) Budgets
--    Assign budget limits for the default categories inserted in 000002_create_categories_table.up.sql
INSERT INTO budgets (user_id, category_id, limit_amount)
VALUES
    (1, 1, 300.00),  -- Groceries
    (1, 2, 1000.00), -- Rent
    (1, 3, 200.00);  -- Entertainment

-- 3) Transactions
--    Simple examples of debit and credit transactions.
INSERT INTO transactions (user_id, amount, transaction_type, category_id)
VALUES
    (1, 50.00,  'debit', 1),  -- Groceries
    (1, 500.00, 'debit', 2),  -- Rent
    (1, 20.00,  'debit', 3),  -- Entertainment
    (1, 2000.00, 'credit', NULL); -- A credit (no category)

-- 4) AI Predictions
--    Placeholder data showing how an AI tool might have predicted category/amount
INSERT INTO ai_predictions (user_id, predicted_category, predicted_amount)
VALUES
    (1, 'Groceries', 45.00),
    (1, 'Rent', 550.00),
    (1, 'Entertainment', 30.00);
===== FILE: ./migrations/000005_create_ai_predictions_table.down.sql =====
-- Rollback for AI Predictions Table
DROP TABLE IF EXISTS ai_predictions;===== FILE: ./migrations/000001_create_users_table.down.sql =====
-- Rollback for Users Table
DROP TABLE IF EXISTS users;===== FILE: ./migrations/000005_create_ai_predictions_table.up.sql =====
CREATE TABLE ai_predictions
(
    id                 SERIAL PRIMARY KEY,
    user_id            INT REFERENCES users (id) ON DELETE CASCADE,
    predicted_category VARCHAR(50),
    predicted_amount   DECIMAL(10, 2),
    prediction_date    TIMESTAMP DEFAULT NOW()
);

===== FILE: ./migrations/000004_create_budgets_table.up.sql =====
CREATE TABLE budgets
(
    id           SERIAL PRIMARY KEY,
    user_id      INT REFERENCES users (id) ON DELETE CASCADE,
    category_id  INT REFERENCES categories (id) ON DELETE CASCADE,
    limit_amount DECIMAL(10, 2) NOT NULL,
    created_at   TIMESTAMP DEFAULT NOW()
);

CREATE INDEX idx_budgets_user_id ON budgets(user_id);
===== FILE: ./migrations/000003_create_transactions_table.down.sql =====
-- Rollback for Transactions Table
DROP TABLE IF EXISTS transactions;

-- Rollback for Transactions Indexes
DROP INDEX IF EXISTS idx_transactions_user_id;
DROP INDEX IF EXISTS idx_transactions_timestamp;===== FILE: ./migrations/000004_create_budgets_table.down.sql =====
-- Rollback for Budgets Table
DROP TABLE IF EXISTS budgets;

-- Rollback for Budgets Index
DROP INDEX IF EXISTS idx_budgets_user_id;
===== FILE: ./migrations/000001_create_users_table.up.sql =====
CREATE TABLE users (
    id SERIAL PRIMARY KEY,
    username VARCHAR(50) UNIQUE NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    password_hash TEXT NOT NULL,
    created_at TIMESTAMP DEFAULT NOW()
);
===== FILE: ./migrations/000002_create_categories_table.up.sql =====
CREATE TABLE categories
(
    id          SERIAL PRIMARY KEY,
    name        VARCHAR(50) UNIQUE NOT NULL,
    description TEXT
);

-- Default categories
INSERT INTO categories (name, description)
VALUES ('Groceries', 'Food shopping'),
       ('Rent', 'Monthly rent payments'),
       ('Entertainment', 'Movies, games, outings');
===== FILE: ./go.mod =====
module AI_Budgeter

go 1.24

require (
	github.com/bytedance/sonic v1.11.6 // indirect
	github.com/bytedance/sonic/loader v0.1.1 // indirect
	github.com/cloudwego/base64x v0.1.4 // indirect
	github.com/cloudwego/iasm v0.2.0 // indirect
	github.com/gabriel-vasile/mimetype v1.4.3 // indirect
	github.com/gin-contrib/sse v0.1.0 // indirect
	github.com/gin-gonic/gin v1.10.0 // indirect
	github.com/go-playground/locales v0.14.1 // indirect
	github.com/go-playground/universal-translator v0.18.1 // indirect
	github.com/go-playground/validator/v10 v10.20.0 // indirect
	github.com/goccy/go-json v0.10.2 // indirect
	github.com/golang-jwt/jwt/v4 v4.5.1 // indirect
	github.com/json-iterator/go v1.1.12 // indirect
	github.com/klauspost/cpuid/v2 v2.2.7 // indirect
	github.com/leodido/go-urn v1.4.0 // indirect
	github.com/lib/pq v1.10.9 // indirect
	github.com/mattn/go-isatty v0.0.20 // indirect
	github.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd // indirect
	github.com/modern-go/reflect2 v1.0.2 // indirect
	github.com/pelletier/go-toml/v2 v2.2.2 // indirect
	github.com/twitchyliquid64/golang-asm v0.15.1 // indirect
	github.com/ugorji/go/codec v1.2.12 // indirect
	golang.org/x/arch v0.8.0 // indirect
	golang.org/x/crypto v0.36.0 // indirect
	golang.org/x/net v0.25.0 // indirect
	golang.org/x/sys v0.31.0 // indirect
	golang.org/x/text v0.23.0 // indirect
	google.golang.org/protobuf v1.34.1 // indirect
	gopkg.in/yaml.v3 v3.0.1 // indirect
)
===== FILE: ./Dockerfile =====
# Build stage: compile the Go application
FROM golang:1.20-alpine AS builder
WORKDIR /app

# Copy go.mod and go.sum files first for dependency caching
COPY go.mod go.sum ./
RUN go mod download

# Copy the source code
COPY . .

# Build the binary (adjust the flags and output name as necessary)
RUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o app .

# Final stage: minimal image to run the application
FROM alpine:latest
WORKDIR /app

# Copy the built binary from the builder stage
COPY --from=builder /app/app .

# Expose the port that your application listens on (adjust as needed)
EXPOSE 8080

# Run the Go binary
CMD ["./app"]
===== FILE: ./go.sum =====
github.com/bytedance/sonic v1.11.6 h1:oUp34TzMlL+OY1OUWxHqsdkgC/Zfc85zGqw9siXjrc0=
github.com/bytedance/sonic v1.11.6/go.mod h1:LysEHSvpvDySVdC2f87zGWf6CIKJcAvqab1ZaiQtds4=
github.com/bytedance/sonic/loader v0.1.1 h1:c+e5Pt1k/cy5wMveRDyk2X4B9hF4g7an8N3zCYjJFNM=
github.com/bytedance/sonic/loader v0.1.1/go.mod h1:ncP89zfokxS5LZrJxl5z0UJcsk4M4yY2JpfqGeCtNLU=
github.com/cloudwego/base64x v0.1.4 h1:jwCgWpFanWmN8xoIUHa2rtzmkd5J2plF/dnLS6Xd/0Y=
github.com/cloudwego/base64x v0.1.4/go.mod h1:0zlkT4Wn5C6NdauXdJRhSKRlJvmclQ1hhJgA0rcu/8w=
github.com/cloudwego/iasm v0.2.0 h1:1KNIy1I1H9hNNFEEH3DVnI4UujN+1zjpuk6gwHLTssg=
github.com/cloudwego/iasm v0.2.0/go.mod h1:8rXZaNYT2n95jn+zTI1sDr+IgcD2GVs0nlbbQPiEFhY=
github.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=
github.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=
github.com/gabriel-vasile/mimetype v1.4.3 h1:in2uUcidCuFcDKtdcBxlR0rJ1+fsokWf+uqxgUFjbI0=
github.com/gabriel-vasile/mimetype v1.4.3/go.mod h1:d8uq/6HKRL6CGdk+aubisF/M5GcPfT7nKyLpA0lbSSk=
github.com/gin-contrib/sse v0.1.0 h1:Y/yl/+YNO8GZSjAhjMsSuLt29uWRFHdHYUb5lYOV9qE=
github.com/gin-contrib/sse v0.1.0/go.mod h1:RHrZQHXnP2xjPF+u1gW/2HnVO7nvIa9PG3Gm+fLHvGI=
github.com/gin-gonic/gin v1.10.0 h1:nTuyha1TYqgedzytsKYqna+DfLos46nTv2ygFy86HFU=
github.com/gin-gonic/gin v1.10.0/go.mod h1:4PMNQiOhvDRa013RKVbsiNwoyezlm2rm0uX/T7kzp5Y=
github.com/go-playground/locales v0.14.1 h1:EWaQ/wswjilfKLTECiXz7Rh+3BjFhfDFKv/oXslEjJA=
github.com/go-playground/locales v0.14.1/go.mod h1:hxrqLVvrK65+Rwrd5Fc6F2O76J/NuW9t0sjnWqG1slY=
github.com/go-playground/universal-translator v0.18.1 h1:Bcnm0ZwsGyWbCzImXv+pAJnYK9S473LQFuzCbDbfSFY=
github.com/go-playground/universal-translator v0.18.1/go.mod h1:xekY+UJKNuX9WP91TpwSH2VMlDf28Uj24BCp08ZFTUY=
github.com/go-playground/validator/v10 v10.20.0 h1:K9ISHbSaI0lyB2eWMPJo+kOS/FBExVwjEviJTixqxL8=
github.com/go-playground/validator/v10 v10.20.0/go.mod h1:dbuPbCMFw/DrkbEynArYaCwl3amGuJotoKCe95atGMM=
github.com/goccy/go-json v0.10.2 h1:CrxCmQqYDkv1z7lO7Wbh2HN93uovUHgrECaO5ZrCXAU=
github.com/goccy/go-json v0.10.2/go.mod h1:6MelG93GURQebXPDq3khkgXZkazVtN9CRI+MGFi0w8I=
github.com/golang-jwt/jwt/v4 v4.5.1 h1:JdqV9zKUdtaa9gdPlywC3aeoEsR681PlKC+4F5gQgeo=
github.com/golang-jwt/jwt/v4 v4.5.1/go.mod h1:m21LjoU+eqJr34lmDMbreY2eSTRJ1cv77w39/MY0Ch0=
github.com/google/gofuzz v1.0.0/go.mod h1:dBl0BpW6vV/+mYPU4Po3pmUjxk6FQPldtuIdl/M65Eg=
github.com/json-iterator/go v1.1.12 h1:PV8peI4a0ysnczrg+LtxykD8LfKY9ML6u2jnxaEnrnM=
github.com/json-iterator/go v1.1.12/go.mod h1:e30LSqwooZae/UwlEbR2852Gd8hjQvJoHmT4TnhNGBo=
github.com/klauspost/cpuid/v2 v2.0.9/go.mod h1:FInQzS24/EEf25PyTYn52gqo7WaD8xa0213Md/qVLRg=
github.com/klauspost/cpuid/v2 v2.2.7 h1:ZWSB3igEs+d0qvnxR/ZBzXVmxkgt8DdzP6m9pfuVLDM=
github.com/klauspost/cpuid/v2 v2.2.7/go.mod h1:Lcz8mBdAVJIBVzewtcLocK12l3Y+JytZYpaMropDUws=
github.com/knz/go-libedit v1.10.1/go.mod h1:MZTVkCWyz0oBc7JOWP3wNAzd002ZbM/5hgShxwh4x8M=
github.com/leodido/go-urn v1.4.0 h1:WT9HwE9SGECu3lg4d/dIA+jxlljEa1/ffXKmRjqdmIQ=
github.com/leodido/go-urn v1.4.0/go.mod h1:bvxc+MVxLKB4z00jd1z+Dvzr47oO32F/QSNjSBOlFxI=
github.com/lib/pq v1.10.9 h1:YXG7RB+JIjhP29X+OtkiDnYaXQwpS4JEWq7dtCCRUEw=
github.com/lib/pq v1.10.9/go.mod h1:AlVN5x4E4T544tWzH6hKfbfQvm3HdbOxrmggDNAPY9o=
github.com/mattn/go-isatty v0.0.20 h1:xfD0iDuEKnDkl03q4limB+vH+GxLEtL/jb4xVJSWWEY=
github.com/mattn/go-isatty v0.0.20/go.mod h1:W+V8PltTTMOvKvAeJH7IuucS94S2C6jfK/D7dTCTo3Y=
github.com/modern-go/concurrent v0.0.0-20180228061459-e0a39a4cb421/go.mod h1:6dJC0mAP4ikYIbvyc7fijjWJddQyLn8Ig3JB5CqoB9Q=
github.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd h1:TRLaZ9cD/w8PVh93nsPXa1VrQ6jlwL5oN8l14QlcNfg=
github.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd/go.mod h1:6dJC0mAP4ikYIbvyc7fijjWJddQyLn8Ig3JB5CqoB9Q=
github.com/modern-go/reflect2 v1.0.2 h1:xBagoLtFs94CBntxluKeaWgTMpvLxC4ur3nMaC9Gz0M=
github.com/modern-go/reflect2 v1.0.2/go.mod h1:yWuevngMOJpCy52FWWMvUC8ws7m/LJsjYzDa0/r8luk=
github.com/pelletier/go-toml/v2 v2.2.2 h1:aYUidT7k73Pcl9nb2gScu7NSrKCSHIDE89b3+6Wq+LM=
github.com/pelletier/go-toml/v2 v2.2.2/go.mod h1:1t835xjRzz80PqgE6HHgN2JOsmgYu/h4qDAS4n929Rs=
github.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=
github.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=
github.com/stretchr/objx v0.4.0/go.mod h1:YvHI0jy2hoMjB+UWwv71VJQ9isScKT/TqJzVSSt89Yw=
github.com/stretchr/objx v0.5.0/go.mod h1:Yh+to48EsGEfYuaHDzXPcE3xhTkx73EhmCGUpEOglKo=
github.com/stretchr/objx v0.5.2/go.mod h1:FRsXN1f5AsAjCGJKqEizvkpNtU+EGNCLh3NxZ/8L+MA=
github.com/stretchr/testify v1.3.0/go.mod h1:M5WIy9Dh21IEIfnGCwXGc5bZfKNJtfHm1UVUgZn+9EI=
github.com/stretchr/testify v1.7.0/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=
github.com/stretchr/testify v1.7.1/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=
github.com/stretchr/testify v1.8.0/go.mod h1:yNjHg4UonilssWZ8iaSj1OCr/vHnekPRkoO+kdMU+MU=
github.com/stretchr/testify v1.8.1/go.mod h1:w2LPCIKwWwSfY2zedu0+kehJoqGctiVI29o6fzry7u4=
github.com/stretchr/testify v1.8.4/go.mod h1:sz/lmYIOXD/1dqDmKjjqLyZ2RngseejIcXlSw2iwfAo=
github.com/stretchr/testify v1.9.0/go.mod h1:r2ic/lqez/lEtzL7wO/rwa5dbSLXVDPFyf8C91i36aY=
github.com/twitchyliquid64/golang-asm v0.15.1 h1:SU5vSMR7hnwNxj24w34ZyCi/FmDZTkS4MhqMhdFk5YI=
github.com/twitchyliquid64/golang-asm v0.15.1/go.mod h1:a1lVb/DtPvCB8fslRZhAngC2+aY1QWCk3Cedj/Gdt08=
github.com/ugorji/go/codec v1.2.12 h1:9LC83zGrHhuUA9l16C9AHXAqEV/2wBQ4nkvumAE65EE=
github.com/ugorji/go/codec v1.2.12/go.mod h1:UNopzCgEMSXjBc6AOMqYvWC1ktqTAfzJZUZgYf6w6lg=
golang.org/x/arch v0.0.0-20210923205945-b76863e36670/go.mod h1:5om86z9Hs0C8fWVUuoMHwpExlXzs5Tkyp9hOrfG7pp8=
golang.org/x/arch v0.8.0 h1:3wRIsP3pM4yUptoR96otTUOXI367OS0+c9eeRi9doIc=
golang.org/x/arch v0.8.0/go.mod h1:FEVrYAQjsQXMVJ1nsMoVVXPZg6p2JE2mx8psSWTDQys=
golang.org/x/crypto v0.23.0 h1:dIJU/v2J8Mdglj/8rJ6UUOM3Zc9zLZxVZwwxMooUSAI=
golang.org/x/crypto v0.23.0/go.mod h1:CKFgDieR+mRhux2Lsu27y0fO304Db0wZe70UKqHu0v8=
golang.org/x/crypto v0.36.0 h1:AnAEvhDddvBdpY+uR+MyHmuZzzNqXSe/GvuDeob5L34=
golang.org/x/crypto v0.36.0/go.mod h1:Y4J0ReaxCR1IMaabaSMugxJES1EpwhBHhv2bDHklZvc=
golang.org/x/net v0.25.0 h1:d/OCCoBEUq33pjydKrGQhw7IlUPI2Oylr+8qLx49kac=
golang.org/x/net v0.25.0/go.mod h1:JkAGAh7GEvH74S6FOH42FLoXpXbE/aqXSrIQjXgsiwM=
golang.org/x/sys v0.5.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
golang.org/x/sys v0.6.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
golang.org/x/sys v0.20.0 h1:Od9JTbYCk261bKm4M/mw7AklTlFYIa0bIp9BgSm1S8Y=
golang.org/x/sys v0.20.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=
golang.org/x/sys v0.31.0 h1:ioabZlmFYtWhL+TRYpcnNlLwhyxaM9kWTDEmfnprqik=
golang.org/x/sys v0.31.0/go.mod h1:BJP2sWEmIv4KK5OTEluFJCKSidICx8ciO85XgH3Ak8k=
golang.org/x/text v0.15.0 h1:h1V/4gjBv8v9cjcR6+AR5+/cIYK5N/WAgiv4xlsEtAk=
golang.org/x/text v0.15.0/go.mod h1:18ZOQIKpY8NJVqYksKHtTdi31H5itFRjB5/qKTNYzSU=
golang.org/x/text v0.23.0 h1:D71I7dUrlY+VX0gQShAThNGHFxZ13dGLBHQLVl1mJlY=
golang.org/x/text v0.23.0/go.mod h1:/BLNzu4aZCJ1+kcD0DNRotWKage4q2rGVAg4o22unh4=
google.golang.org/protobuf v1.34.1 h1:9ddQBjfCyZPOHPUiPxpYESBLc+T8P3E+Vo4IbKZgFWg=
google.golang.org/protobuf v1.34.1/go.mod h1:c6P6GXX6sHbq/GpV6MGZEdwhWPcYBgnhAHhKbcUYpos=
gopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=
gopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=
gopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=
gopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=
nullprogram.com/x/optparse v1.0.0/go.mod h1:KdyPE+Igbe0jQUrVfMqDMeJQIJZEuyV7pjYmp6pbG50=
rsc.io/pdf v0.1.1/go.mod h1:n8OzWcQ6Sp37PL01nO98y4iUCRdTGarVfzxY20ICaU4=
===== FILE: ./docker-compose.yml =====
version: '3.8'

services:
  postgres:
    image: postgres:latest
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: dev.user
      POSTGRES_PASSWORD: dev.password
      POSTGRES_DB: dev.database
    profiles:
      - database

  migrate:
    image: migrate/migrate
    volumes:
      - ./migrations:/migrations
    command: [ "-path", "/migrations", "-database", "postgres://dev.user:dev.password@postgres:5432/dev.database?sslmode=disable", "up" ]
    depends_on:
      - postgres
    profiles:
      - database

  app:
    build: .
    depends_on:
      - postgres
    ports:
      - "8080:8080"
    environment:
      DATABASE_URL: postgres://dev.user:dev.password@postgres:5432/dev.database
    profiles:
      - demo

# TODO migrate ?

volumes:
  pgdata:
===== FILE: ./main/server.go =====
// Package main defines the server setup and entry point for the AI_Budgeter application.
package main

import (
	"AI_Budgeter/handlers" // Adjust import path based on your project
	"AI_Budgeter/services" // Adjust import path based on your project
	"database/sql"
	"fmt"
	"github.com/gin-gonic/gin"
	_ "github.com/lib/pq" // PostgreSQL driver
	"log"
)

// SetupServer initializes the Gin engine and routes.
func SetupServer(db *sql.DB) *gin.Engine {
	r := gin.Default()

	// Initialize the AuthService with the DB connection.
	authService := &services.AuthService{DB: db}

	// Create a user handler for registration.
	userHandler := &handlers.UserHandler{AuthService: authService}
	r.POST("/register", userHandler.RegisterEndpoint)

	// Create a login handler for authentication.
	loginHandler := &handlers.LoginHandler{AuthService: authService}
	r.POST("/login", loginHandler.LoginEndpoint)

	// Additional routes can be defined here (e.g., /transactions, /balance, etc.)

	return r
}

func main() {
	// Connect to PostgreSQL (adjust credentials as needed).
	connStr := "postgres://dev.user:dev.password@localhost:5432/dev.database?sslmode=disable"
	db, err := sql.Open("postgres", connStr)
	if err != nil {
		log.Fatal("Failed to connect to the database:", err)
	}

	// Verify DB connection.
	if pingErr := db.Ping(); pingErr != nil {
		log.Fatal("Cannot ping database:", pingErr)
	}

	fmt.Println("Database connection successful.")

	// Create the server and run it on port 8080.
	server := SetupServer(db)
	if httpErr := server.Run(":8080"); httpErr != nil {
		log.Fatal("Server failed to start:", httpErr)
	}
}
===== FILE: ./handlers/login_handler.go =====
// Package handlers defines HTTP handlers for user-related endpoints.
package handlers

import (
	"net/http"

	"AI_Budgeter/services" // Adjust the import path based on your project structure
	"github.com/gin-gonic/gin"
)

// LoginHandler handles authentication-related HTTP requests.
type LoginHandler struct {
	AuthService *services.AuthService
}

// LoginEndpoint handles the /login POST request.
// It expects JSON input with "email" and "password" fields and returns a JWT token on success.
func (l *LoginHandler) LoginEndpoint(ctx *gin.Context) {
	// Define the expected request body structure.
	type requestBody struct {
		Email    string `json:"email"`
		Password string `json:"password"`
	}

	var body requestBody

	// Bind JSON from the request to our struct.
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.JSON(http.StatusBadRequest, gin.H{"error": "Invalid request payload"})
		return
	}

	// Attempt to authenticate the user via the AuthService.
	token, err := l.AuthService.LoginUser(body.Email, body.Password)
	if err != nil {
		ctx.JSON(http.StatusUnauthorized, gin.H{"error": "Invalid email or password"})
		return
	}

	// Return the generated JWT token.
	ctx.JSON(http.StatusOK, gin.H{"token": token})
}
===== FILE: ./handlers/user_handler.go =====
// Package handlers defines HTTP handlers for user-related endpoints.
package handlers

import (
	"net/http"

	"AI_Budgeter/services" // Adjust import path based on your project structure
	"github.com/gin-gonic/gin"
	"golang.org/x/crypto/bcrypt"
)

// UserHandler handles user-related HTTP requests.
type UserHandler struct {
	AuthService *services.AuthService
}

// RegisterEndpoint handles the /register POST request.
// It expects JSON input with "username", "email", and "password" fields.
func (u *UserHandler) RegisterEndpoint(ctx *gin.Context) {
	type requestBody struct {
		Username string `json:"username"`
		Email    string `json:"email"`
		Password string `json:"password"`
	}

	var body requestBody

	// Single-line comment: bind JSON from the request to our struct.
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.JSON(http.StatusBadRequest, gin.H{"error": "Invalid request payload"})
		return
	}

	// Single-line comment: check for duplicate email before registering.
	emailTaken, err := u.AuthService.IsEmailTaken(body.Email)
	if err != nil {
		ctx.JSON(http.StatusInternalServerError, gin.H{"error": "Database error"})
		return
	}
	if emailTaken {
		ctx.JSON(http.StatusConflict, gin.H{"error": "Email already in use"})
		return
	}

	// Single-line comment: hash the password using bcrypt for security.
	hashedPassword, hashErr := bcrypt.GenerateFromPassword([]byte(body.Password), bcrypt.DefaultCost)
	if hashErr != nil {
		ctx.JSON(http.StatusInternalServerError, gin.H{"error": "Error hashing password"})
		return
	}

	// Single-line comment: attempt to register the user via the AuthService.
	registerErr := u.AuthService.RegisterUser(body.Username, body.Email, string(hashedPassword))
	if registerErr != nil {
		ctx.JSON(http.StatusInternalServerError, gin.H{"error": "Error registering user"})
		return
	}

	ctx.JSON(http.StatusCreated, gin.H{"message": "User registered successfully"})
}
===== FILE: ./main.go =====
package main

import (
  "fmt"
)

//TIP <p>To run your code, right-click the code and select <b>Run</b>.</p> <p>Alternatively, click
// the <icon src="AllIcons.Actions.Execute"/> icon in the gutter and select the <b>Run</b> menu item from here.</p>

func main() {
  //TIP <p>Press <shortcut actionId="ShowIntentionActions"/> when your caret is at the underlined text
  // to see how GoLand suggests fixing the warning.</p><p>Alternatively, if available, click the lightbulb to view possible fixes.</p>
  s := "gopher"
  fmt.Println("Hello and welcome, %s!", s)

  for i := 1; i <= 5; i++ {
	//TIP <p>To start your debugging session, right-click your code in the editor and select the Debug option.</p> <p>We have set one <icon src="AllIcons.Debugger.Db_set_breakpoint"/> breakpoint
	// for you, but you can always add more by pressing <shortcut actionId="ToggleLineBreakpoint"/>.</p>
	fmt.Println("i =", 100/i)
  }
}===== FILE: ./services/auth_service.go =====
// Package services provides the business logic for user authentication and registration.
package services

import (
	"database/sql"
	"errors"
	"log"
	"time"

	"github.com/golang-jwt/jwt/v4"          // JWT library for token generation
	"golang.org/x/crypto/bcrypt"             // Package for hashing and comparing passwords
)

const jwtSecret = "mysecretkey" // In production, use a secure environment variable

// AuthService is responsible for handling user authentication and registration.
type AuthService struct {
	DB *sql.DB
}

// RegisterUser creates a new user record in the database.
// It expects the caller to provide a hashed password (for security best practices).
func (a *AuthService) RegisterUser(username, email, hashedPassword string) error {
	stmt, err := a.DB.Prepare("INSERT INTO users (username, email, password_hash) VALUES ($1, $2, $3)")
	if err != nil {
		log.Println("Error preparing INSERT statement:", err)
		return err
	}
	defer stmt.Close()

	_, execErr := stmt.Exec(username, email, hashedPassword)
	if execErr != nil {
		log.Println("Error executing INSERT for new user:", execErr)
		return execErr
	}

	return nil
}

// IsEmailTaken checks if the given email already exists in the users table.
// Returns true if the email is already in use, false otherwise.
func (a *AuthService) IsEmailTaken(email string) (bool, error) {
	var count int
	query := "SELECT COUNT(*) FROM users WHERE email = $1"
	err := a.DB.QueryRow(query, email).Scan(&count)
	if err != nil {
		return false, err
	}
	return count > 0, nil
}

// LoginUser validates the user credentials and returns a JWT token if successful.
func (a *AuthService) LoginUser(email, password string) (string, error) {
	// Retrieve the user record based on the provided email.
	var userID int
	var username, hashedPassword string
	query := "SELECT id, username, password_hash FROM users WHERE email = $1"
	err := a.DB.QueryRow(query, email).Scan(&userID, &username, &hashedPassword)
	if err != nil {
		log.Println("Error retrieving user:", err)
		return "", errors.New("invalid credentials")
	}

	// Compare the provided password with the stored hashed password.
	if err = bcrypt.CompareHashAndPassword([]byte(hashedPassword), []byte(password)); err != nil {
		log.Println("Password mismatch:", err)
		return "", errors.New("invalid credentials")
	}

	// Create a new JWT token with the user's id and username as claims.
	claims := jwt.MapClaims{
		"user_id":  userID,
		"username": username,
		"exp":      time.Now().Add(time.Hour * 1).Unix(), // token expires in 1 hour
	}
	token := jwt.NewWithClaims(jwt.SigningMethodHS256, claims)

	// Sign the token using the secret key.
	tokenString, err := token.SignedString([]byte(jwtSecret))
	if err != nil {
		log.Println("Error signing JWT token:", err)
		return "", err
	}

	return tokenString, nil
}
